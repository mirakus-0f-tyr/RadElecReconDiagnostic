/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainMenu;

import Config.Config;
import java.io.BufferedReader;
import java.io.FileInputStream;

import java.io.IOException;
import java.io.InputStreamReader;
import java.time.*;
import java.time.format.DateTimeFormatter;

import javax.swing.*;

/**
 *
 * @author Rad Elec Inc.
 */
public class MainMenuUI extends javax.swing.JFrame {
    
    //Rad Elec Recon Variables
    String[] CRM_Parameters;
    public static String version = "v0.5.6";
    
    //Old variables
    String[] SNandCF;
    String stickerCalDate = "Unknown";
    String stickerNextCalDate = "Unknown";
    public static String strCompanyName = "New Company";
    public static String strAddress1 = "Address Line #1";
    public static String strAddress2 = "Address Line #2";
    public static String strAddress3 = "Address Line #3";
    public static double targetRnCAvg;

    // variables for config.txt file values
    // These values will be the last set preferences
    // and populate the configuration fields.
    // DiagMode - diagnostic mode on or off
    // UnitType - last set to device, US or SI units
    // WaitTime - last set to device, wait time
    // TestDur  - last set to device, test duration
    // DispRes  - last set to device, disp results on/off
    public static boolean diagnosticMode;
    public static String unitType;
    public static int waitTime;
    public static int testDuration;
    public static boolean displayStatus;

    /**
     * Creates new form MainMenuUI
     */
    public MainMenuUI() {
        //Auto-generated GUI builder
        parseCompanyTXT();
	parseConfigTXT();
        initComponents();
        
        //Invis certain labels on load
        lblReconSN.setVisible(false);
        lblFirmwareVersion.setVisible(false);
        lblDataSessions.setVisible(false);
        btnCreateTXT.setVisible(false);
        btnClearSession.setVisible(false);
        btnClearMemory.setVisible(false);
        btnAllDataDump.setVisible(false);
        btnDownloadSession.setVisible(false);
        btnOpenSavedFile.setVisible(false);
        btnGeneratePDF.setVisible(false);
        btnEraseReconData.setVisible(false);
        
        lblVersion.setText(version);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCloseProgram = new javax.swing.JButton();
        lblRadonScoutQuickCal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblSystemConsole = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        lblReconSN = new javax.swing.JLabel();
        btnCreateTXT = new javax.swing.JButton();
        btnClearMemory = new javax.swing.JButton();
        btnClearSession = new javax.swing.JButton();
        btnAllDataDump = new javax.swing.JButton();
        lblVersion = new javax.swing.JLabel();
        lblFirmwareVersion = new javax.swing.JLabel();
        lblDataSessions = new javax.swing.JLabel();
        btnConfig = new javax.swing.JButton();
        btnDownloadSession = new javax.swing.JButton();
        btnOpenSavedFile = new javax.swing.JButton();
        btnGeneratePDF = new javax.swing.JButton();
        btnEraseReconData = new javax.swing.JButton();
        lblTestSiteInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTestSiteInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rad Elec Recon Diagnostic Tool");
        setIconImages(null);
        setResizable(false);

        btnCloseProgram.setText("Close");
        btnCloseProgram.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnCloseProgram.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCloseProgramMouseClicked(evt);
            }
        });

        lblRadonScoutQuickCal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRadonScoutQuickCal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainMenu/RadElecReconDiagnostic.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystemConsole.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystemConsole.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSystemConsole.setText("System Console");

        btnConnect.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setToolTipText("Click here to search for the Recon CRM.");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lblReconSN.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblReconSN.setText("Recon S/N:");

        btnCreateTXT.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnCreateTXT.setText("Create TXT/XLS");
        btnCreateTXT.setMaximumSize(new java.awt.Dimension(125, 25));
        btnCreateTXT.setMinimumSize(new java.awt.Dimension(125, 25));
        btnCreateTXT.setPreferredSize(new java.awt.Dimension(125, 25));
        btnCreateTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTXTActionPerformed(evt);
            }
        });

        btnClearMemory.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnClearMemory.setText("Clear All Memory (:CM)");
        btnClearMemory.setMaximumSize(new java.awt.Dimension(125, 25));
        btnClearMemory.setMinimumSize(new java.awt.Dimension(125, 25));
        btnClearMemory.setPreferredSize(new java.awt.Dimension(125, 25));
        btnClearMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearMemoryActionPerformed(evt);
            }
        });

        btnClearSession.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnClearSession.setText("Clear Current Session (:CD)");
        btnClearSession.setMaximumSize(new java.awt.Dimension(125, 25));
        btnClearSession.setMinimumSize(new java.awt.Dimension(125, 25));
        btnClearSession.setPreferredSize(new java.awt.Dimension(125, 25));
        btnClearSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSessionActionPerformed(evt);
            }
        });

        btnAllDataDump.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnAllDataDump.setText("All Data Dump (debug)");
        btnAllDataDump.setMaximumSize(new java.awt.Dimension(125, 25));
        btnAllDataDump.setMinimumSize(new java.awt.Dimension(125, 25));
        btnAllDataDump.setPreferredSize(new java.awt.Dimension(125, 25));
        btnAllDataDump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllDataDumpActionPerformed(evt);
            }
        });

        lblVersion.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        lblVersion.setText("v?");
        lblVersion.setToolTipText("");

        lblFirmwareVersion.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblFirmwareVersion.setText("Firmware v");

        lblDataSessions.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblDataSessions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDataSessions.setText("Data Sessions:");
        lblDataSessions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblDataSessions.setMaximumSize(new java.awt.Dimension(181, 16));
        lblDataSessions.setMinimumSize(new java.awt.Dimension(181, 16));
        lblDataSessions.setName(""); // NOI18N
        lblDataSessions.setPreferredSize(new java.awt.Dimension(181, 16));

        btnConfig.setText("Config");
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        btnDownloadSession.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnDownloadSession.setText("Download Session");

        btnOpenSavedFile.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnOpenSavedFile.setText("Open Saved File");
        btnOpenSavedFile.setName(""); // NOI18N

        btnGeneratePDF.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnGeneratePDF.setLabel("Generate PDF");
        btnGeneratePDF.setMaximumSize(new java.awt.Dimension(136, 26));
        btnGeneratePDF.setMinimumSize(new java.awt.Dimension(136, 26));
        btnGeneratePDF.setName(""); // NOI18N
        btnGeneratePDF.setPreferredSize(new java.awt.Dimension(136, 26));

        btnEraseReconData.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnEraseReconData.setText("Erase Recon Data");
        btnEraseReconData.setMaximumSize(new java.awt.Dimension(136, 26));
        btnEraseReconData.setMinimumSize(new java.awt.Dimension(136, 26));
        btnEraseReconData.setPreferredSize(new java.awt.Dimension(136, 26));

        lblTestSiteInfo.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        lblTestSiteInfo.setText("Test Site Information");

        txtTestSiteInfo.setColumns(20);
        txtTestSiteInfo.setRows(5);
        txtTestSiteInfo.setTabSize(4);
        jScrollPane1.setViewportView(txtTestSiteInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRadonScoutQuickCal, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVersion))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblSystemConsole, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnConnect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDataSessions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblReconSN, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(lblFirmwareVersion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnEraseReconData, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAllDataDump, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnOpenSavedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnClearSession, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnDownloadSession, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnCreateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnGeneratePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnClearMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(lblTestSiteInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCloseProgram, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(btnConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRadonScoutQuickCal)
                    .addComponent(lblVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblReconSN)
                            .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSystemConsole)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDataSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreateTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDownloadSession, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFirmwareVersion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClearSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOpenSavedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGeneratePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAllDataDump, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEraseReconData, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCloseProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTestSiteInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(670, 520));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseProgramMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseProgramMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnCloseProgramMouseClicked

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        MySwingWorker worker = new MySwingWorker();
        worker.execute();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnCreateTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTXTActionPerformed
        GenerateTXTDump worker = new GenerateTXTDump();
        worker.execute();
    }//GEN-LAST:event_btnCreateTXTActionPerformed

    private void btnClearMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearMemoryActionPerformed
        ClearReconMemory worker = new ClearReconMemory();
        worker.execute();
    }//GEN-LAST:event_btnClearMemoryActionPerformed

    private void btnClearSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSessionActionPerformed
        ClearCurrentSession worker = new ClearCurrentSession();
        worker.execute();
    }//GEN-LAST:event_btnClearSessionActionPerformed

    private void btnAllDataDumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllDataDumpActionPerformed
        AllDataDump worker = new AllDataDump();
        worker.execute();
    }//GEN-LAST:event_btnAllDataDumpActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        JFrame frameOptions = new Config();
        frameOptions.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frameOptions.setLocationRelativeTo(null);
        frameOptions.setVisible(true);
    }//GEN-LAST:event_btnConfigActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame myFrame = new MainMenuUI();
                myFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                myFrame.setVisible(true);
                //Eventually need to learn how to implement custom window icons...
                //myFrame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("assets/radelec.ico")));
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllDataDump;
    private javax.swing.JButton btnClearMemory;
    private javax.swing.JButton btnClearSession;
    private javax.swing.JButton btnCloseProgram;
    public static javax.swing.JButton btnConfig;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnCreateTXT;
    private javax.swing.JButton btnDownloadSession;
    private javax.swing.JButton btnEraseReconData;
    private javax.swing.JButton btnGeneratePDF;
    private javax.swing.JButton btnOpenSavedFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JLabel lblDataSessions;
    public static javax.swing.JLabel lblFirmwareVersion;
    private javax.swing.JLabel lblRadonScoutQuickCal;
    public static javax.swing.JLabel lblReconSN;
    public static javax.swing.JLabel lblSystemConsole;
    private javax.swing.JLabel lblTestSiteInfo;
    public static javax.swing.JLabel lblVersion;
    private javax.swing.JTextArea txtTestSiteInfo;
    // End of variables declaration//GEN-END:variables

//Returns today's date as the default calibration date.
public String DefaultCalDate() {
    LocalDate caldate = LocalDate.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/dd/yyyy");
    DateTimeFormatter sticker_format = DateTimeFormatter.ofPattern("MMM d, yyyy");
    stickerCalDate = caldate.format(sticker_format);
    return caldate.format(formatter);
}

//Returns the next calibration date (one year from current calibration date)
public String NextCalDate() {
    LocalDate nextcaldate = LocalDate.now().plusYears(1);
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/dd/yyyy");
    DateTimeFormatter sticker_format = DateTimeFormatter.ofPattern("MMM d, yyyy");
    stickerNextCalDate = nextcaldate.format(sticker_format);
    return nextcaldate.format(formatter);
}

public static void displayProgressLabel(String update_progress) {
    lblSystemConsole.setText(update_progress);
}

public static void displaySerialNumber(String ReconSerial) {
    lblReconSN.setVisible(true);
    lblReconSN.setText("Recon S/N: #" + ReconSerial);
}

public static void displayFirmwareVersion(String FirmwareVersion) {
    lblFirmwareVersion.setVisible(true);
    lblFirmwareVersion.setText("Firmware v" + FirmwareVersion);
}

public static void displayDataSessions(String NumSessions) {
    lblDataSessions.setVisible(true);
    lblDataSessions.setText("Data Sessions: " + NumSessions);
    //Long LongSessions = Long.parseLong(NumSessions);
    //if(LongSessions == 0) {
    //    MainMenuUI.displayProgressLabel("No data sessions in memory.");
    //}
}

public static void parseCompanyTXT() {
    String company_info = "config/company.txt";
    try {
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(company_info)));
        strCompanyName = br.readLine();
        strAddress1 = br.readLine();
        strAddress2 = br.readLine();
        strAddress3 = br.readLine();
        br.close();
    } catch (IOException e) {
        System.out.println("ERROR: Unable to parse company.txt file.");
        e.printStackTrace();
    }
}

public static void parseConfigTXT() {
    // set name of config text file
    String configTextFile = "config/config.txt";

    // int to bool conversion values
    int diagModeRawValue;
    int displayStatusRawValue;

    // try to parse the config file
    try {
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(configTextFile)));

        // get DiagMode
        diagModeRawValue = Integer.parseInt(br.readLine().substring(9));
        if (diagModeRawValue == 0)
	    diagnosticMode = false;
	else
	    diagnosticMode = true;

        // get UnitType
	unitType = br.readLine().substring(9);

        // get WaitTime
	waitTime = Integer.parseInt(br.readLine().substring(9));

	// get TestDur
	testDuration = Integer.parseInt(br.readLine().substring(8));

	// get DispRes (display mode - results on or off)
	displayStatusRawValue = Integer.parseInt(br.readLine().substring(8));
	if (displayStatusRawValue == 0)
	    displayStatus = false;
	else
	    displayStatus = true;

	// cleanup buffered reader
	br.close();
	}

	// if error, print error and show stack trace
	catch (IOException e){
	    System.out.println("ERROR: Unable to parse config.txt file.");
	    e.printStackTrace();
	}
}

private class MySwingWorker extends SwingWorker<Void, Void>{
    @Override
    protected Void doInBackground() throws Exception {
      btnConnect.setEnabled(false);
      lblReconSN.setVisible(false);
      lblFirmwareVersion.setVisible(false);
      lblDataSessions.setVisible(false);
      btnCreateTXT.setVisible(false);
      btnClearMemory.setVisible(false);
      btnClearSession.setVisible(false);
      btnAllDataDump.setVisible(false);
      btnDownloadSession.setVisible(false);
      btnOpenSavedFile.setVisible(false);
      btnGeneratePDF.setVisible(false);
      btnEraseReconData.setVisible(false);
      System.out.println("Connect button pressed.");
      CRM_Parameters = ScanComm.run(1);
      if(CRM_Parameters[0].equals("true")){

      if (diagnosticMode) {
          btnCreateTXT.setVisible(true);
          btnClearMemory.setVisible(true);
          btnClearSession.setVisible(true);
          btnAllDataDump.setVisible(true);
      }
      else {
          btnDownloadSession.setVisible(true);
          btnOpenSavedFile.setVisible(true);
          btnGeneratePDF.setVisible(true);
          btnEraseReconData.setVisible(true);
      }
      }
      btnConnect.setEnabled(true);
      return null;
    }
    }

private class GenerateTXTDump extends SwingWorker<Void, Void>{
    @Override
    protected Void doInBackground() throws Exception {
      btnConnect.setEnabled(false);
      btnCreateTXT.setEnabled(false);
      btnClearMemory.setEnabled(false);
      btnClearSession.setEnabled(false);
      btnAllDataDump.setEnabled(false);
      //lblReconSN.setVisible(false);
      //lblFirmwareVersion.setVisible(false);
      //lblDataSessions.setVisible(false);
      System.out.println("CreateTXT/XLS button pressed.");
      CRM_Parameters = ScanComm.run(2);
      btnConnect.setEnabled(true);
      btnCreateTXT.setEnabled(true);
      btnClearMemory.setEnabled(true);
      btnClearSession.setEnabled(true);
      btnAllDataDump.setEnabled(true);
      return null;
    }
    }

private class AllDataDump extends SwingWorker<Void, Void>{
    @Override
    protected Void doInBackground() throws Exception {
      btnConnect.setEnabled(false);
      btnCreateTXT.setEnabled(false);
      btnClearMemory.setEnabled(false);
      btnClearSession.setEnabled(false);
      btnAllDataDump.setEnabled(false);
      //lblReconSN.setVisible(false);
      //lblFirmwareVersion.setVisible(false);
      //lblDataSessions.setVisible(false);
      System.out.println("AllDataDump button pressed.");
      CRM_Parameters = ScanComm.run(5);
      btnConnect.setEnabled(true);
      btnCreateTXT.setEnabled(true);
      btnClearMemory.setEnabled(true);
      btnClearSession.setEnabled(true);
      btnAllDataDump.setEnabled(true);
      return null;
    }
    }

private class ClearCurrentSession extends SwingWorker<Void, Void>{
    @Override
    protected Void doInBackground() throws Exception {
      btnConnect.setEnabled(false);
      btnCreateTXT.setEnabled(false);
      btnClearMemory.setEnabled(false);
      btnClearSession.setEnabled(false);
      //lblReconSN.setVisible(false);
      //lblFirmwareVersion.setVisible(false);
      //lblDataSessions.setVisible(false);
      btnAllDataDump.setEnabled(false);
      System.out.println("Clear Current Session button pressed.");
      CRM_Parameters = ScanComm.run(3);
      btnConnect.setEnabled(true);
      btnCreateTXT.setEnabled(true);
      btnClearMemory.setEnabled(true);
      btnClearSession.setEnabled(true);
      btnAllDataDump.setEnabled(true);
      return null;
    }
    }

private class ClearReconMemory extends SwingWorker<Void, Void>{
    @Override
    protected Void doInBackground() throws Exception {
      btnConnect.setEnabled(false);
      btnCreateTXT.setEnabled(false);
      btnClearMemory.setEnabled(false);
      btnClearSession.setEnabled(false);
      //lblReconSN.setVisible(false);
      //lblFirmwareVersion.setVisible(false);
      //lblDataSessions.setVisible(false);
      btnAllDataDump.setEnabled(false);
      System.out.println("Clear Memory button pressed.");
      CRM_Parameters = ScanComm.run(4);
      btnConnect.setEnabled(true);
      btnCreateTXT.setEnabled(true);
      btnClearMemory.setEnabled(true);
      btnClearSession.setEnabled(true);
      btnAllDataDump.setEnabled(true);
      return null;
    }
    }

}

