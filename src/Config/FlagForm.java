/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Config;

import MainMenu.Logging;
import MainMenu.ScanComm;
import javax.swing.JOptionPane;
/**
 *
 * @author john
 */
public class FlagForm extends javax.swing.JFrame {

    // flag preferences
    public static String displayPreferencePres;
    public static String displayPreferenceTemp;
    public static String displayPreferenceDual;
    public static String displayPreferenceUnits;
    public static String displayPreferenceNoAvg;
    public static String displayPreferenceAvgFirstFourHours;
    public static boolean displayOptionsWriteSuccess;

    /**
     * Creates new form FlagForm
     */
    public FlagForm() {
	initComponents();

	try {
	    if (ScanComm.run(1)[0] == "false") {
		cboPressureSelect.setEnabled(false);
		cboTemperatureSelect.setEnabled(false);
		cboDualChamberSelect.setEnabled(false);
		cboRadonUnitSelect.setEnabled(false);
		cboToggleNoAveraging.setEnabled(false);
		cboDispIncFirstFourHours.setEnabled(false);
		btnApplySpecial.setEnabled(false);
		btnFlagDefaults.setEnabled(false);

		JOptionPane.showMessageDialog(this, "You must connect a Recon to use this feature.\r\nPlug in the USB cable, turn the key to the middle\r\nposition, and reopen the Display Options window.");
	    }
	    else // get current Recon settings...
		ScanComm.run(10);
	}

	catch (Exception ex) {
	    Logging.main(ex.toString());
	}

	// set the combo boxes based on the current settings
	if (displayPreferencePres == "mBar")
	    cboPressureSelect.setSelectedItem("mBar");
	else
	    cboPressureSelect.setSelectedItem("inHG");

	if (displayPreferenceTemp == "F")
	    cboTemperatureSelect.setSelectedItem("F");
	else
	    cboTemperatureSelect.setSelectedItem("C");

	if (displayPreferenceDual == "no")
	    cboDualChamberSelect.setSelectedItem("No");
	else
	    cboDualChamberSelect.setSelectedItem("Yes");

	if (displayPreferenceUnits == "pCi/L")
	    cboRadonUnitSelect.setSelectedItem("pCi/L");
	else if (displayPreferenceUnits == "Bq/m3")
	    cboRadonUnitSelect.setSelectedItem("Bq/m3");
	else if (displayPreferenceUnits == "CPH")
	    cboRadonUnitSelect.setSelectedItem("CPH");

	if (displayPreferenceNoAvg == "Hourly")
	    cboToggleNoAveraging.setSelectedItem("Hourly");
	else
	    cboToggleNoAveraging.setSelectedItem("Ten Mins.");

	if (displayPreferenceAvgFirstFourHours == "Yes")
	    cboDispIncFirstFourHours.setSelectedItem("Yes");
	else
	    cboDispIncFirstFourHours.setSelectedItem("No");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPressure = new javax.swing.JLabel();
        lblTemperature = new javax.swing.JLabel();
        lblDualChamber = new javax.swing.JLabel();
        lblExposureUnits = new javax.swing.JLabel();
        cboPressureSelect = new javax.swing.JComboBox<>();
        cboTemperatureSelect = new javax.swing.JComboBox<>();
        cboDualChamberSelect = new javax.swing.JComboBox<>();
        cboRadonUnitSelect = new javax.swing.JComboBox<>();
        btnApplySpecial = new javax.swing.JButton();
        cboToggleNoAveraging = new javax.swing.JComboBox<>();
        lblDisplayedReadingInterval = new javax.swing.JLabel();
        lblPreviewRun = new javax.swing.JLabel();
        lblPreviewRuntime = new javax.swing.JLabel();
        lblPreviewTemp = new javax.swing.JLabel();
        lblPreviewHum = new javax.swing.JLabel();
        lblPreviewPres = new javax.swing.JLabel();
        lblPreviewCh1 = new javax.swing.JLabel();
        lblPreviewCh2 = new javax.swing.JLabel();
        btnFlagDefaults = new javax.swing.JButton();
        lblDispIncFirstFourHours = new javax.swing.JLabel();
        cboDispIncFirstFourHours = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        lblPressure.setText("Pres. Unit");

        lblTemperature.setText("Temp. Unit");

        lblDualChamber.setText("Dual Chamber");

        lblExposureUnits.setText("Radon Unit");

        cboPressureSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mBar", "inHG" }));
        cboPressureSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPressureSelectActionPerformed(evt);
            }
        });

        cboTemperatureSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "C" }));
        cboTemperatureSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTemperatureSelectActionPerformed(evt);
            }
        });

        cboDualChamberSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        cboDualChamberSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDualChamberSelectActionPerformed(evt);
            }
        });

        cboRadonUnitSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pCi/L", "Bq/m3", "CPH" }));
        cboRadonUnitSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRadonUnitSelectActionPerformed(evt);
            }
        });

        btnApplySpecial.setText("Apply");
        btnApplySpecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplySpecialActionPerformed(evt);
            }
        });

        cboToggleNoAveraging.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hourly", "Ten Mins." }));
        cboToggleNoAveraging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboToggleNoAveragingActionPerformed(evt);
            }
        });

        lblDisplayedReadingInterval.setText("Rolling Average");

        lblPreviewRun.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewRun.setText("Run:");

        lblPreviewRuntime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewRuntime.setText("2:25");

        lblPreviewTemp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewTemp.setText("64F");

        lblPreviewHum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewHum.setText("28%");

        lblPreviewPres.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewPres.setText("1015mB");

        lblPreviewCh1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewCh1.setText("14.6 pCi/L");

        lblPreviewCh2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviewCh2.setText("14.6 pCi/L");

        btnFlagDefaults.setText("Defaults");
        btnFlagDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlagDefaultsActionPerformed(evt);
            }
        });

        lblDispIncFirstFourHours.setText("Inc. First Four");

        cboDispIncFirstFourHours.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        cboDispIncFirstFourHours.setToolTipText("Selecting Yes will incorporate the four hour equilibrium period into the final average when ending the test. Rad Elec recommends against this unless explicitly allowed in your state. ");
        cboDispIncFirstFourHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDispIncFirstFourHoursActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblExposureUnits)
                            .addComponent(cboPressureSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboRadonUnitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPreviewTemp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPreviewRun)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPreviewRuntime))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPreviewHum)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPreviewPres))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPreviewCh1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPreviewCh2)))
                        .addGap(53, 53, 53))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPressure)
                            .addComponent(lblDisplayedReadingInterval)
                            .addComponent(cboToggleNoAveraging, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnFlagDefaults, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnApplySpecial, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboDualChamberSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDualChamber)
                    .addComponent(lblTemperature)
                    .addComponent(cboTemperatureSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDispIncFirstFourHours)
                    .addComponent(cboDispIncFirstFourHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPressure)
                    .addComponent(lblDualChamber))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboPressureSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboDualChamberSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblExposureUnits)
                            .addComponent(lblTemperature))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboRadonUnitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboTemperatureSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPreviewRun)
                            .addComponent(lblPreviewRuntime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPreviewTemp)
                            .addComponent(lblPreviewHum)
                            .addComponent(lblPreviewPres))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPreviewCh1)
                            .addComponent(lblPreviewCh2))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDisplayedReadingInterval)
                    .addComponent(lblDispIncFirstFourHours))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboToggleNoAveraging, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDispIncFirstFourHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApplySpecial)
                    .addComponent(btnFlagDefaults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboDualChamberSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDualChamberSelectActionPerformed
        if (cboDualChamberSelect.getSelectedItem().equals("Yes")) {
	    displayPreferenceDual = "yes";
	    lblPreviewCh2.setVisible(true);
	}
	else {
	    displayPreferenceDual = "no";
	    lblPreviewCh2.setVisible(false);
	}

	UpdateRadonLabelText();
    }//GEN-LAST:event_cboDualChamberSelectActionPerformed

    private void cboTemperatureSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTemperatureSelectActionPerformed
        if (cboTemperatureSelect.getSelectedItem().equals("F")) {
	    displayPreferenceTemp = "F";
	    lblPreviewTemp.setText("64F");
	}
	else {
	    displayPreferenceTemp = "C";
	    lblPreviewTemp.setText("18C");
	}
    }//GEN-LAST:event_cboTemperatureSelectActionPerformed

    private void cboRadonUnitSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRadonUnitSelectActionPerformed
        if (cboRadonUnitSelect.getSelectedItem().equals("pCi/L"))
	    displayPreferenceUnits = "pCi/L";
	else if (cboRadonUnitSelect.getSelectedItem().equals("Bq/m3"))
	    displayPreferenceUnits = "Bq/m3";
	else if (cboRadonUnitSelect.getSelectedItem().equals("CPH"))
	    displayPreferenceUnits = "CPH";

	UpdateRadonLabelText();
    }//GEN-LAST:event_cboRadonUnitSelectActionPerformed

    private void cboPressureSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPressureSelectActionPerformed
        if (cboPressureSelect.getSelectedItem().equals("inHG")) {
	    displayPreferencePres = "inHG";
	    lblPreviewPres.setText("29.97IN");
	}
	else {
	    displayPreferencePres = "mBar";
	    lblPreviewPres.setText("1015mB");
	}
    }//GEN-LAST:event_cboPressureSelectActionPerformed

    private void btnApplySpecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplySpecialActionPerformed
	System.out.println("Attempting to write flag value.");
	displayOptionsWriteSuccess = false;

	String selectedOptions = null;

	try {
	   ScanComm.run(8);

	   // get values for confirmation to user...
	   if (displayOptionsWriteSuccess) {
	       selectedOptions = "Temp: " + cboTemperatureSelect.getSelectedItem() + "\r\n" + "Pres: " + cboPressureSelect.getSelectedItem() + "\r\n"
	       + "Unit: " + cboRadonUnitSelect.getSelectedItem() + "\r\n" + "Dual chamber: " + cboDualChamberSelect.getSelectedItem() + "\r\n" +
	       "Rdg. updated: " + cboToggleNoAveraging.getSelectedItem() + "\r\n" + "First four hours: " + cboDispIncFirstFourHours.getSelectedItem() + "\r\n";

	       // inform user
	       JOptionPane.showMessageDialog(this, "Settings saved successfully:\r\n" + selectedOptions + "\r\n");
	   }
	   else
	       JOptionPane.showMessageDialog(this, "ERROR! Please verify Recon is connected\r\nand in I/O mode and try again.");
	}

	// needs proper handling
	catch (Exception anyEx) {};
    }//GEN-LAST:event_btnApplySpecialActionPerformed

    private void cboToggleNoAveragingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboToggleNoAveragingActionPerformed
        if (cboToggleNoAveraging.getSelectedItem().equals("Ten Mins."))
	    displayPreferenceNoAvg = "Ten Mins.";
	else
	    displayPreferenceNoAvg = "Hourly";
    }//GEN-LAST:event_cboToggleNoAveragingActionPerformed

    private void btnFlagDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlagDefaultsActionPerformed
        // TODO add your handling code here:
	SetLabelsToDefault();
    }//GEN-LAST:event_btnFlagDefaultsActionPerformed

    private void cboDispIncFirstFourHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDispIncFirstFourHoursActionPerformed
	if (cboDispIncFirstFourHours.getSelectedItem().equals("No"))
	    displayPreferenceAvgFirstFourHours = "No";
	else
	    displayPreferenceAvgFirstFourHours = "Yes";
    }//GEN-LAST:event_cboDispIncFirstFourHoursActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlagForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlagForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlagForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlagForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlagForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnApplySpecial;
    private static javax.swing.JButton btnFlagDefaults;
    private javax.swing.JComboBox<String> cboDispIncFirstFourHours;
    private javax.swing.JComboBox<String> cboDualChamberSelect;
    private javax.swing.JComboBox<String> cboPressureSelect;
    private javax.swing.JComboBox<String> cboRadonUnitSelect;
    private javax.swing.JComboBox<String> cboTemperatureSelect;
    private javax.swing.JComboBox<String> cboToggleNoAveraging;
    private javax.swing.JLabel lblDispIncFirstFourHours;
    private javax.swing.JLabel lblDisplayedReadingInterval;
    private javax.swing.JLabel lblDualChamber;
    private javax.swing.JLabel lblExposureUnits;
    private javax.swing.JLabel lblPressure;
    private javax.swing.JLabel lblPreviewCh1;
    private javax.swing.JLabel lblPreviewCh2;
    private javax.swing.JLabel lblPreviewHum;
    private javax.swing.JLabel lblPreviewPres;
    private javax.swing.JLabel lblPreviewRun;
    private javax.swing.JLabel lblPreviewRuntime;
    private javax.swing.JLabel lblPreviewTemp;
    private javax.swing.JLabel lblTemperature;
    // End of variables declaration//GEN-END:variables

    private void UpdateRadonLabelText() {
        if (cboRadonUnitSelect.getSelectedItem().equals("pCi/L")) {
	    if (displayPreferenceDual == "yes") {
		    lblPreviewCh1.setText("14.6 ");
		    lblPreviewCh2.setText("14.6 pCi/L");
	    }
	    else
		lblPreviewCh1.setText("14.6 pCi/L");
	}
	else if (cboRadonUnitSelect.getSelectedItem().equals("Bq/m3")) {
	    if (displayPreferenceDual == "yes") {
		lblPreviewCh1.setText("540 ");
		lblPreviewCh2.setText("540 Bq/m3");
	    }
	    else
		lblPreviewCh1.setText("540 Bq/m3");
	}
	else if (cboRadonUnitSelect.getSelectedItem().equals("CPH")) {
	    if (displayPreferenceDual == "yes") {
		lblPreviewCh1.setText("87 ");
		lblPreviewCh2.setText("87 CPH");
	    }
	    else
		lblPreviewCh1.setText("87 CPH");
	}
    }

    private void SetLabelsToDefault() {
	cboPressureSelect.setSelectedItem("inHG");
	cboTemperatureSelect.setSelectedItem("F");
	cboDualChamberSelect.setSelectedItem("No");
	cboRadonUnitSelect.setSelectedItem("pCi/L");
	cboToggleNoAveraging.setSelectedItem("Hourly");
	cboDispIncFirstFourHours.setSelectedItem("No");
	displayPreferencePres = "inHG";
	displayPreferenceTemp = "F";
	displayPreferenceDual = "no";
	displayPreferenceUnits = "pCi/L";
	displayPreferenceNoAvg = "Hourly";
	displayPreferenceAvgFirstFourHours = "No";
    }

    public static void EnableAllButtons(boolean boolEnableButtons) {
	btnApplySpecial.setEnabled(boolEnableButtons);
	btnFlagDefaults.setEnabled(boolEnableButtons);
    }
}
