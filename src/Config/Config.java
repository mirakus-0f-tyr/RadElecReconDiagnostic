/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Config;

import MainMenu.MainMenuUI;
import static MainMenu.MainMenuUI.strComment;
import static MainMenu.MainMenuUI.strMitigation;
import static MainMenu.MainMenuUI.strProtocol;
import static MainMenu.MainMenuUI.strTampering;
import static MainMenu.MainMenuUI.strWeather;
import static MainMenu.MainMenuUI.strRoomDeployed;
import java.io.*;

/**
 *
 * @author Rad Elec
 */
public class Config extends javax.swing.JFrame {

    /**
     * Creates new form Config
     */
    public Config() {
        initComponents();
        String company_info = "config/company.txt";
        try {
            //Let's start off by parsing the company.txt file, and pulling those values into the company tab.
            //Note that currently this data will only be saved when the Config window is closed.
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(company_info)));
            String strCompanyName;
            String strAddress1;
            String strAddress2;
            String strAddress3;
            strCompanyName = br.readLine();
            strAddress1 = br.readLine();
            strAddress2 = br.readLine();
            strAddress3 = br.readLine();
            br.close();
            txtCompanyName.setText(strCompanyName);
            txtAddress1.setText(strAddress1);
            txtAddress2.setText(strAddress2);
            txtAddress3.setText(strAddress3);
            //The following will find appropriate config parameters; it should work regardless of where the specific line
            //is located in the config.txt file.
            String strAppMode;
            String strUnitSystem;
            String strDisplaySig;
	    String strPDFWindow;
	    String strTestClearMode;
            strAppMode = findAppMode();
            strUnitSystem = findUnitSystem();
            strDisplaySig = findDisplaySig();
	    strPDFWindow = findPDFWindow();
	    strTestClearMode = findTestClearMode();
            LoadReportTXT();
            loadDeploymentVariables();
            cboAppMode.setSelectedItem(strAppMode);
            cboUnitSystem.setSelectedItem(strUnitSystem);
            cboDisplaySig.setSelectedItem(strDisplaySig);
	    cboPDFFolder.setSelectedItem(strPDFWindow);
	    cboClearOldTests.setSelectedItem(strTestClearMode);
            
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt or company.txt. There was a problem loading the settings.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabConfig = new javax.swing.JTabbedPane();
        pnlCompany = new java.awt.Panel();
        lblCompanyName = new java.awt.Label();
        txtCompanyName = new java.awt.TextField();
        lblCompanyAddress = new java.awt.Label();
        txtAddress1 = new java.awt.TextField();
        txtAddress2 = new java.awt.TextField();
        txtAddress3 = new java.awt.TextField();
        pnlSettings = new java.awt.Panel();
        cboAppMode = new javax.swing.JComboBox();
        lblAppMode = new java.awt.Label();
        lblUnits = new java.awt.Label();
        cboUnitSystem = new javax.swing.JComboBox();
        cboDisplaySig = new javax.swing.JComboBox();
        lblDisplaySignature = new java.awt.Label();
        lblPDFFolder = new javax.swing.JLabel();
        cboPDFFolder = new javax.swing.JComboBox<>();
        lblClearOldTest = new javax.swing.JLabel();
        cboClearOldTests = new javax.swing.JComboBox<>();
        btnOpenFlagSelect = new javax.swing.JButton();
        pnlSettings1 = new java.awt.Panel();
        lblDeployedBy = new java.awt.Label();
        txtDeployedBy = new java.awt.TextField();
        lblRetrievedBy = new java.awt.Label();
        txtRetrievedBy = new java.awt.TextField();
        txtAnalyzedBy = new java.awt.TextField();
        lblAnalyzedBy = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReportText = new javax.swing.JTextArea();
        lblReportText = new java.awt.Label();
        pnlSettings2 = new java.awt.Panel();
        lblProtocol = new java.awt.Label();
        txtProtocol = new java.awt.TextField();
        lblTampering = new java.awt.Label();
        txtTampering = new java.awt.TextField();
        txtWeather = new java.awt.TextField();
        lblWeather = new java.awt.Label();
        txtMitigation = new java.awt.TextField();
        lblMitigation = new java.awt.Label();
        txtComment = new java.awt.TextField();
        lblComment = new java.awt.Label();
        lblRoomDeployed = new javax.swing.JLabel();
        txtRoomDeployed = new java.awt.TextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Config");
        setAlwaysOnTop(false);
        setName("frmOptions"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlCompany.setBackground(new java.awt.Color(204, 204, 204));
        pnlCompany.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblCompanyName.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblCompanyName.setText("Company Name");

        txtCompanyName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCompanyName.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtCompanyName.setName(""); // NOI18N

        lblCompanyAddress.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblCompanyAddress.setText("Company Address & Details");

        txtAddress1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAddress1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtAddress1.setName(""); // NOI18N

        txtAddress2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAddress2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtAddress2.setName(""); // NOI18N

        txtAddress3.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAddress3.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtAddress3.setName(""); // NOI18N

        javax.swing.GroupLayout pnlCompanyLayout = new javax.swing.GroupLayout(pnlCompany);
        pnlCompany.setLayout(pnlCompanyLayout);
        pnlCompanyLayout.setHorizontalGroup(
            pnlCompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCompanyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompanyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddress3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        pnlCompanyLayout.setVerticalGroup(
            pnlCompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCompanyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCompanyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        tabConfig.addTab("Company", pnlCompany);

        pnlSettings.setBackground(new java.awt.Color(204, 204, 204));

        cboAppMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "End-User", "Diagnostic" }));

        lblAppMode.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblAppMode.setText("App Mode");

        lblUnits.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblUnits.setText("Unit System");

        cboUnitSystem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "US", "SI" }));

        cboDisplaySig.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Display Line", "No Signature" }));

        lblDisplaySignature.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblDisplaySignature.setText("Signature Options");

        lblPDFFolder.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblPDFFolder.setText("Open PDF Folder");
        lblPDFFolder.setToolTipText("");

        cboPDFFolder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        lblClearOldTest.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblClearOldTest.setText("Clear Old Tests From Recon");

        cboClearOldTests.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Never", "Prompt", "Always" }));
        cboClearOldTests.setToolTipText("Clear old tests from Recon as you download them?");

        btnOpenFlagSelect.setText("Display Options");
        btnOpenFlagSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFlagSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addComponent(lblClearOldTest, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createSequentialGroup()
                        .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createSequentialGroup()
                                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cboClearOldTests, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cboAppMode, 0, 123, Short.MAX_VALUE)
                                        .addComponent(lblAppMode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cboUnitSystem, 0, 123, Short.MAX_VALUE))
                                    .addComponent(lblUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDisplaySignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboDisplaySig, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPDFFolder)
                                    .addComponent(cboPDFFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingsLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnOpenFlagSelect)))
                        .addGap(23, 23, 23))))
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAppMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDisplaySignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboAppMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDisplaySig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addComponent(lblPDFFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboPDFFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboUnitSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(lblClearOldTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboClearOldTests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenFlagSelect))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        lblPDFFolder.getAccessibleContext().setAccessibleName("lblPDFFolder");

        tabConfig.addTab("Settings", pnlSettings);

        pnlSettings1.setBackground(new java.awt.Color(204, 204, 204));

        lblDeployedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblDeployedBy.setName(""); // NOI18N
        lblDeployedBy.setText("Deployed By:");

        txtDeployedBy.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtDeployedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtDeployedBy.setName(""); // NOI18N

        lblRetrievedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblRetrievedBy.setName(""); // NOI18N
        lblRetrievedBy.setText("Retrieved By:");

        txtRetrievedBy.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtRetrievedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtRetrievedBy.setName(""); // NOI18N

        txtAnalyzedBy.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAnalyzedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtAnalyzedBy.setName(""); // NOI18N

        lblAnalyzedBy.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblAnalyzedBy.setName(""); // NOI18N
        lblAnalyzedBy.setText("Analyzed By:");

        txtReportText.setColumns(20);
        txtReportText.setLineWrap(true);
        txtReportText.setRows(5);
        txtReportText.setWrapStyleWord(true);
        txtReportText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(txtReportText);

        lblReportText.setAlignment(java.awt.Label.CENTER);
        lblReportText.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblReportText.setName(""); // NOI18N
        lblReportText.setText("Report Text");

        javax.swing.GroupLayout pnlSettings1Layout = new javax.swing.GroupLayout(pnlSettings1);
        pnlSettings1.setLayout(pnlSettings1Layout);
        pnlSettings1Layout.setHorizontalGroup(
            pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettings1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlSettings1Layout.createSequentialGroup()
                        .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlSettings1Layout.createSequentialGroup()
                                .addComponent(lblDeployedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDeployedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlSettings1Layout.createSequentialGroup()
                                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblRetrievedBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAnalyzedBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRetrievedBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtAnalyzedBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addComponent(lblReportText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlSettings1Layout.setVerticalGroup(
            pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettings1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDeployedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDeployedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRetrievedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRetrievedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAnalyzedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnalyzedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(lblReportText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabConfig.addTab("Report", pnlSettings1);

        pnlSettings2.setBackground(new java.awt.Color(204, 204, 204));

        lblProtocol.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblProtocol.setName(""); // NOI18N
        lblProtocol.setText("Protocol:");

        txtProtocol.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtProtocol.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtProtocol.setName(""); // NOI18N

        lblTampering.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblTampering.setName(""); // NOI18N
        lblTampering.setText("Tampering:");

        txtTampering.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtTampering.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtTampering.setName(""); // NOI18N

        txtWeather.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtWeather.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtWeather.setName(""); // NOI18N

        lblWeather.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblWeather.setName(""); // NOI18N
        lblWeather.setText("Weather:");

        txtMitigation.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtMitigation.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtMitigation.setName(""); // NOI18N

        lblMitigation.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblMitigation.setName(""); // NOI18N
        lblMitigation.setText("Mitigation:");

        txtComment.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtComment.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtComment.setName(""); // NOI18N

        lblComment.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblComment.setName(""); // NOI18N
        lblComment.setText("Comment:");

        lblRoomDeployed.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblRoomDeployed.setText("Room:");

        txtRoomDeployed.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtRoomDeployed.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtRoomDeployed.setName(""); // NOI18N

        javax.swing.GroupLayout pnlSettings2Layout = new javax.swing.GroupLayout(pnlSettings2);
        pnlSettings2.setLayout(pnlSettings2Layout);
        pnlSettings2Layout.setHorizontalGroup(
            pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettings2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSettings2Layout.createSequentialGroup()
                        .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblMitigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTampering, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblWeather, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblProtocol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(pnlSettings2Layout.createSequentialGroup()
                        .addComponent(lblRoomDeployed)
                        .addGap(45, 45, 45)))
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProtocol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTampering, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(txtWeather, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMitigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtRoomDeployed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        pnlSettings2Layout.setVerticalGroup(
            pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettings2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTampering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTampering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtWeather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWeather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMitigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMitigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSettings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRoomDeployed)
                    .addComponent(txtRoomDeployed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        tabConfig.addTab("Deployment", pnlSettings2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabConfig)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabConfig)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        String company_info = "config/company.txt";
        try {
            System.out.println("Attempting to update config and company files...");
            FileWriter fw = new FileWriter(company_info, false);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            pw.println(txtCompanyName.getText());
            pw.println(txtAddress1.getText());
            pw.println(txtAddress2.getText());
            pw.println(txtAddress3.getText());
            pw.close();
            //Let's surgically write our config parameters.
            writeConfig();
            //Let's write our report parameters
            writeReportTXT();
            //Let's write our deployment parameters
            writeDeploymentTXT();
            //Let's reload our config settings
            MainMenuUI.parseConfigTXT();
            //Let's reload our deployment settings
            MainMenuUI.parseDeploymentTXT();
            //Setting button enabled...
            MainMenuUI.btnConfig.setEnabled(true);
        } catch (IOException e) {
            System.out.println("ERROR: Unable to write to company.txt (to store updated company information).");
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        MainMenuUI.btnConfig.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void btnOpenFlagSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFlagSelectActionPerformed
        javax.swing.JFrame flagOptions = new FlagForm();
	flagOptions.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        flagOptions.setLocationRelativeTo(null);
        flagOptions.setVisible(true);
    }//GEN-LAST:event_btnOpenFlagSelectActionPerformed

    private String findAppMode() {
        String config_info = "config/config.txt";
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_info)));
            //The following loop should iterate throughout the entire config.txt file until it hits an empty line.
            //Although this means that the order of the configuration parameters is unimportant, a single blank
            //line will terminate the for loop (and halt the parsing process).
            //For unexpected values in DiagMode value (or if it's missing), we default to an End-User model.
            for (String strLine = br.readLine(); strLine != null; strLine = br.readLine()) {
                if(strLine.contains("DiagMode=")) {
                    //Cool, we've found what we're looking for...
                    if(strLine.endsWith("1")) {
                        br.close();
                        return "Diagnostic";
                    } else {
                        br.close();
                        return "End-User";
                    }
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt in order to find the AppMode. There was a problem loading the settings.");
        }
        return "End-User";
    }
    
    private String findDisplaySig() {
        String config_info = "config/config.txt";
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_info)));
            //The following loop should iterate throughout the entire config.txt file until it hits an empty line.
            //Although this means that the order of the configuration parameters is unimportant, a single blank
            //line will terminate the for loop (and halt the parsing process).
            //For unexpected values in DisplaySig value (or if it's missing), we default to an DisplaySig=1.
            for (String strLine = br.readLine(); strLine != null; strLine = br.readLine()) {
                if(strLine.contains("DisplaySig=")) {
                    //Cool, we've found what we're looking for...
                    if(strLine.endsWith("1")) {
                        br.close();
                        return "Display Line";
                    } else {
                        br.close();
                        return "No Signature";
                    }
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt in order to find DisplaySig. There was a problem loading the settings.");
        }
        return "Display Line";        
    }
    
    public String findUnitSystem() {
        String config_info = "config/config.txt";
        String[] strSplitUnitSystem;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_info)));
            //The following loop should iterate throughout the entire config.txt file until it hits an empty line.
            //Although this means that the order of the configuration parameters is unimportant, a single blank
            //line will terminate the for loop (and halt the parsing process).
            //For unexpected values in UnitType= (or if it's missing), we default to the imperial (US) system.
            for (String strLine = br.readLine(); strLine != null; strLine = br.readLine()) {
                if(strLine.contains("UnitType=")) {
                    strSplitUnitSystem = strLine.split("=");
                    if (strLine.length() < 10) { //If UnitType= has no value, default to US.
                        return "US";
                    }
                    if (strSplitUnitSystem[1].equals("SI")) {
                        br.close();
                        return "SI";
                    } else {
                        br.close();
                        return "US";
                    }
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt in order to find the AppMode. There was a problem loading the settings.");
        }
        return "US";
    }

    private String findPDFWindow() {
        String config_info = "config/config.txt";
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_info)));
            //The following loop should iterate throughout the entire config.txt file until it hits an empty line.
            //Although this means that the order of the configuration parameters is unimportant, a single blank
            //line will terminate the for loop (and halt the parsing process).
            //For unexpected values in DisplaySig value (or if it's missing), we default to an DisplaySig=1.
            for (String strLine = br.readLine(); strLine != null; strLine = br.readLine()) {
                if(strLine.contains("OpenPDFWindow=")) {
                    //Cool, we've found what we're looking for...
                    if(strLine.endsWith("1")) {
                        br.close();
                        return "Yes";
                    } else {
                        br.close();
                        return "No";
                    }
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt in order to find OpenPDFWindow. There was a problem loading the settings.");
        }
        return "OpenPDFWindow";
    }

    private String findTestClearMode() {
        String config_info = "config/config.txt";
	try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(config_info)));
            //The following loop should iterate throughout the entire config.txt file until it hits an empty line.
            //Although this means that the order of the configuration parameters is unimportant, a single blank
            //line will terminate the for loop (and halt the parsing process).
            //For unexpected values in DisplaySig value (or if it's missing), we default to an DisplaySig=1.
            for (String strLine = br.readLine(); strLine != null; strLine = br.readLine()) {
                if(strLine.contains("TestClearMode=")) {
                    //Cool, we've found what we're looking for...
                    if(strLine.endsWith("0")) {
                        br.close();
                        return "Never";
                    } else if (strLine.endsWith("1")) {
                        br.close();
                        return "Prompt";
                    } else if (strLine.endsWith("2")) {
		        br.close();
			return "Always";
		    }
                }
            }
            br.close();
        } catch (IOException e) {
            System.out.println("ERROR: Unable to parse config.txt in order to find TestClearMode. There was a problem loading the settings.");
        }
	return "TestClearMode";
    }

    public void LoadReportTXT() {
        //Report.txt is not as robust as the previous config files -- the first three lines are dedicated to the
        //technicians, and everything after that is dedicated to the report text.
        String report_info = "config/report.txt";
        String strLine;
        String strTrimmedLine;
        String strReportText = "";
        File report = new File(report_info);
        boolean rewriteConfigTXT = false;
        if (report.isFile()) {
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(report_info)));
                //Deployed By:
                strLine = br.readLine();
                if(strLine != null && strLine.length() > 10 && !rewriteConfigTXT) {
                    strTrimmedLine = strLine.trim();
                    txtDeployedBy.setText(strTrimmedLine.substring(11));
                } else {
                    rewriteConfigTXT = true;
                }
                //Retrieved By:
                strLine = br.readLine();
                if(strLine != null && strLine.length() > 11 && !rewriteConfigTXT) {
                    strTrimmedLine = strLine.trim();
                    txtRetrievedBy.setText(strTrimmedLine.substring(12));
                } else {
                    rewriteConfigTXT = true;
                }
                //Analyzed By:
                strLine = br.readLine();
                if(strLine != null && strLine.length() > 10 && !rewriteConfigTXT) {
                    strTrimmedLine = strLine.trim();
                    txtAnalyzedBy.setText(strTrimmedLine.substring(11));
                } else {
                    rewriteConfigTXT = true;
                }
                if(!rewriteConfigTXT) {
                    while ((strLine = br.readLine()) != null) {
                        strReportText = strReportText + strLine;
                    }
                    txtReportText.setText(strReportText);
                }
                br.close();
                if(rewriteConfigTXT) {
                    System.out.println("Unhandled format in report.txt. Attempting to recreate...");
                    txtReportText.setText("Radon is the second leading cause of lung cancer after smoking. The U.S. Environmental Protection Agency (US EPA)"
                        + " and the Surgeon General strongly recommend that further action be taken when a home’s radon test results are 4.0 pCi/L or greater.  "
                        + "The national average indoor radon level is about 1.3 pCi/L. The higher the home’s radon level, the greater the health risk to you"
                        + " and your family. Reducing your radon levels can be done easily, effectively and fairly inexpensively. Even homes with very high"
                        + " radon levels can be reduced below 4.0 pCi/L. Please refer to the EPA website at www.epa.gov/radon for further information to assist"
                        + " you in evaluating your test results or deciding if further action is needed.");
                    MainMenu.MainMenuUI.createReportTXT();
                }
            } catch (IOException e) {
                System.out.println("ERROR: Unable to parse report.txt in order to retrieve the technician or report text information.");
            }
        } else {
            //Default text blob to be generated if the file doesn't exist.
            txtReportText.setText("Radon is the second leading cause of lung cancer after smoking. The U.S. Environmental Protection Agency (US EPA)"
                + " and the Surgeon General strongly recommend that further action be taken when a home’s radon test results are 4.0 pCi/L or greater.  "
                + "The national average indoor radon level is about 1.3 pCi/L. The higher the home’s radon level, the greater the health risk to you"
                + " and your family. Reducing your radon levels can be done easily, effectively and fairly inexpensively. Even homes with very high"
                + " radon levels can be reduced below 4.0 pCi/L. Please refer to the EPA website at www.epa.gov/radon for further information to assist"
                + " you in evaluating your test results or deciding if further action is needed.");
            System.out.println("WARNING: Unable to find report.txt configuration file... will attempt to create it.");
        }
    }
     
    private void writeConfig() {
        try {
            //This should suffice to write any parameter to the config file.
            //Can be expanded as needed.
            String config_info = "config/config.txt";
            BufferedReader br = new BufferedReader(new FileReader(config_info));
            String strLine;
            StringBuffer inputBuffer = new StringBuffer();

            while ((strLine = br.readLine()) != null) {
                inputBuffer.append(strLine);
                inputBuffer.append('\n');
            }
            String strInput = inputBuffer.toString();
            br.close();
        
            //Only rewrite to the config file if there was a change.
        
            //Handle Diagnostic Mode
            if (cboAppMode.getSelectedItem().equals("Diagnostic")) {
                strInput = strInput.replace("DiagMode=0", "DiagMode=1");
            }
            else {
                strInput = strInput.replace("DiagMode=1", "DiagMode=0");
            }
        
            //Handle Unit System
            if (cboUnitSystem.getSelectedItem().equals("SI")) {
                strInput = strInput.replace("UnitType=US", "UnitType=SI");
            }
            else {
                strInput = strInput.replace("UnitType=SI", "UnitType=US");
            }
            
            //Handle Signature Display
            if (cboDisplaySig.getSelectedItem().equals("Display Line")) {
                strInput = strInput.replace("DisplaySig=0", "DisplaySig=1"); 
            }
            else {
                strInput = strInput.replace("DisplaySig=1", "DisplaySig=0");
            }

	    //Handle PDF explorer window preference
	    if (cboPDFFolder.getSelectedItem().equals("Yes")) {
	        strInput = strInput.replace("OpenPDFWindow=0", "OpenPDFWindow=1");
	    }
	    else {
	        strInput = strInput.replace("OpenPDFWindow=1", "OpenPDFWindow=0");
	    }

	    // handling clear-old-tests preference
	    if (cboClearOldTests.getSelectedItem().equals("Never")) {
	        strInput = strInput.replaceAll("TestClearMode=\\d", "TestClearMode=0");
	    } else if (cboClearOldTests.getSelectedItem().equals("Prompt")) {
	        strInput = strInput.replaceAll("TestClearMode=\\d", "TestClearMode=1");
	    } else if (cboClearOldTests.getSelectedItem().equals("Always")) {
	        strInput = strInput.replaceAll("TestClearMode=\\d", "TestClearMode=2");
	    }

            FileOutputStream fileOut = new FileOutputStream(config_info);
            fileOut.write(strInput.getBytes());
            fileOut.close();
        
            //Display the new config settings in the console.
            br = new BufferedReader(new FileReader(config_info));
            //We'll need to clear the buffer, or else it will still contain the original config parameters.
            inputBuffer.delete(0, inputBuffer.length());
            while ((strLine = br.readLine()) != null) {
                inputBuffer.append(strLine);
                inputBuffer.append('\n');
            }
            strInput = inputBuffer.toString();
            System.out.println(strInput);
            br.close();

        } catch (Exception e) {
            System.out.println("ERROR: Unable to update config.txt file.");
        }
    }

    private void writeReportTXT() {
        try {
            //For now, the easiest way to write to this file is just to nuke it and rewrite it.
            //The report.txt file will also be created if it doesn't exist.
        
            String report_info = "config/report.txt";
            PrintWriter pw = new PrintWriter(report_info);
        
            pw.print("DeployedBy=" + txtDeployedBy.getText() + "\n");
            pw.print("RetrievedBy=" + txtRetrievedBy.getText() + "\n");
            pw.print("AnalyzedBy=" + txtAnalyzedBy.getText() + "\n");
            pw.print(txtReportText.getText());

            pw.close();
        
        } catch (Exception e) {
            System.out.println("ERROR: Unable to overwrite report.txt file.");
        }
    }
    
    private void writeDeploymentTXT() {
        try {
            //For now, the easiest way to write to this file is just to nuke it and rewrite it.
            //If the file doesn't exist for whatever reason, it will be created.
            String report_info = "config/deployment.txt";
            PrintWriter pw = new PrintWriter(report_info);
        
            pw.print("Protocol: " + txtProtocol.getText() + "\n");
            pw.print("Tampering: " + txtTampering.getText() + "\n");
            pw.print("Weather: " + txtWeather.getText() + "\n");
            pw.print("Mitigation: " + txtMitigation.getText() + "\n");
            pw.print("Comment: " + txtComment.getText() + "\n");
	    pw.print("Room: " + txtRoomDeployed.getText() + "\n");

            pw.close();
        
        } catch (Exception e) {
            System.out.println("ERROR: Unable to overwrite deployment.txt file.");
        }
    }
    
    private void loadDeploymentVariables() {
        //These should already have been initialized from MainMenu.MainMenuUI.parseReportTXT()
        txtProtocol.setText(strProtocol);
        txtTampering.setText(strTampering);
        txtWeather.setText(strWeather);
        txtMitigation.setText(strMitigation);
        txtComment.setText(strComment);
	txtRoomDeployed.setText(strRoomDeployed);
    }
    
    public String getCustomReportText() {
        return txtReportText.getText();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Config().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenFlagSelect;
    private javax.swing.JComboBox cboAppMode;
    private javax.swing.JComboBox<String> cboClearOldTests;
    private javax.swing.JComboBox cboDisplaySig;
    private javax.swing.JComboBox<String> cboPDFFolder;
    private javax.swing.JComboBox cboUnitSystem;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label lblAnalyzedBy;
    private java.awt.Label lblAppMode;
    private javax.swing.JLabel lblClearOldTest;
    private java.awt.Label lblComment;
    private java.awt.Label lblCompanyAddress;
    private java.awt.Label lblCompanyName;
    private java.awt.Label lblDeployedBy;
    private java.awt.Label lblDisplaySignature;
    private java.awt.Label lblMitigation;
    private javax.swing.JLabel lblPDFFolder;
    private java.awt.Label lblProtocol;
    private java.awt.Label lblReportText;
    private java.awt.Label lblRetrievedBy;
    private javax.swing.JLabel lblRoomDeployed;
    private java.awt.Label lblTampering;
    private java.awt.Label lblUnits;
    private java.awt.Label lblWeather;
    private java.awt.Panel pnlCompany;
    private java.awt.Panel pnlSettings;
    private java.awt.Panel pnlSettings1;
    private java.awt.Panel pnlSettings2;
    private javax.swing.JTabbedPane tabConfig;
    private java.awt.TextField txtAddress1;
    private java.awt.TextField txtAddress2;
    private java.awt.TextField txtAddress3;
    private java.awt.TextField txtAnalyzedBy;
    private java.awt.TextField txtComment;
    private java.awt.TextField txtCompanyName;
    private java.awt.TextField txtDeployedBy;
    private java.awt.TextField txtMitigation;
    private java.awt.TextField txtProtocol;
    private javax.swing.JTextArea txtReportText;
    private java.awt.TextField txtRetrievedBy;
    private java.awt.TextField txtRoomDeployed;
    private java.awt.TextField txtTampering;
    private java.awt.TextField txtWeather;
    // End of variables declaration//GEN-END:variables
}
